<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>study-dubbo</artifactId>
        <groupId>com.lc</groupId>
        <version>1.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>study-dubbo-consumer</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <dependencies>
        <dependency>
            <groupId>com.lc</groupId>
            <artifactId>study-dubbo-contract</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <!-- dubbo -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>dubbo</artifactId>
            <version>2.6.12</version>
        </dependency>
        <!--curator-framework-->
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-framework</artifactId>
            <version>2.7.1</version>
        </dependency>
        <!-- curator-recipes -->
        <dependency>
            <groupId>org.apache.curator</groupId>
            <artifactId>curator-recipes</artifactId>
            <version>2.7.1</version>
        </dependency>
        <!-- spring-mvc -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>4.3.16.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>4.3.16.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>4.3.16.RELEASE</version>
        </dependency>
    </dependencies>

    <build>
        <!-- 最终打成jar包的名称 -->
        <finalName>study-dubbo-consumer</finalName>
        <!-- 打包各种资源，放到适当的位置：工作中如果涉及多个环境，要引入<profiles></profiles> -->
        <resources>
            <!-- 打包配置文件 -->
            <resource>
                <targetPath>${project.build.directory}/classes</targetPath>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.xml</include>
                    <include>**/*.properties</include>
                </includes>
            </resource>
            <!-- Dubbo中SpringContainer启动时，自动加载META-INF/spring目录下的所有配置文件 -->
            <!-- 如果不吧spring配置文件打包到指定的目录下，也可以修改dubbo.properties中的dubbo.spring.config=classpath*;META-INF/spring/*.xml -->
            <resource>
                <targetPath>${project.build.directory}/classes/META-INF</targetPath>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>spring/application-context.xml</include>
                </includes>
            </resource>
            <!-- 把*.properties拿到classes外边 -->
            <resource>
                <targetPath>${project.build.directory}</targetPath>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*.properties</include>
                </includes>
            </resource>
        </resources>

        <plugins>
            <!-- maven-jar-plugin插件用于将本服务打成jar包并配置MANIFEST.MF文件（记录服务依赖的所有jar包路径，供maven-dependency-plugin拷贝） -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <classesDirectory>${project.build.directory}/classes/</classesDirectory>
                    <outputDirectory>${project.build.directory}</outputDirectory>
                    <archive>
                        <manifest>
                            <!-- jar包的main类 -->
                            <mainClass>com.alibaba.dubbo.container.Main</mainClass>
                            <!-- 打包时MANIFEST.MF文件不记录的时间戳版本，一定要设置false，以免给部署带了麻烦 -->
                            <useUniqueVersions>false</useUniqueVersions>
                            <!-- 添加一个Class-Path元素到MANIFEST.MF文件，以及在Class-Path元素中包括所有依赖项：看打包后的MANIFEST.MF文件就明了了 -->
                            <addClasspath>true</addClasspath>
                            <!-- 服务依赖的jar包放在${outputDirectory}/lib目录下 -->
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                        <!-- 外部jar包的依赖也添加到MANIFEST.MF的classpath中 -->
                        <manifestEntries>
                            <Class-Path>.</Class-Path>
                        </manifestEntries>
                    </archive>
                </configuration>
            </plugin>
            <!--maven-dependency-plugin插件用于将maven-jar-plugin配置的依赖包拷贝到指定的位置-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <type>jar</type>
                            <includeTypes>jar</includeTypes>
                            <!-- 存放服务依赖的所有jar包copy的指定的目录下 -->
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>